import pandas as pd

data=pd.read_csv("C:/Users/admin/Downloads/HousingData (1).csv")

from sklearn.datasets import fetch_openml
boston=fetch_openml(name="Boston")

boston_df = pd.DataFrame(boston.data, columns = boston["feature_names"])

boston_df['target'] = boston['target']

boston_df.head()

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from tensorflow import keras

model=keras.Sequential([
    keras.layers.Dense(15,input_shape=(13,),activation='relu'),
    keras.layers.Dense(13,activation='relu'),
    keras.layers.Dense(10,activation='relu')
])

model.compile(loss='mean_absolute_error',optimizer='adam',metrics=["mean_absolute_error"])





//****************Linear Regression Another code by Balraj****************





import pandas as pd
import numpy as np
from sklearn.datasets import fetch_openml

boston = fetch_openml(name='boston')
df= boston.data
df['target']=boston['target']

x = df.drop(['target'], axis=1)
y = df['target']

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.3, random_state=42)

scaler=MinMaxScaler()
scaler.fit(x_train)

x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout

model = Sequential()
model.add(Dense(64, input_dim=13,activation='relu'))
model.add(Dropout(0.15))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(40, activation='relu'))
model.add(Dropout(0.15))
model.add(Dense(54, activation='relu'))
model.add(Dropout(0.18))
model.add(Dense(1))

model.compile(optimizer='adam',loss='mean_squared_error',metrics=['mse','mae'])

history = model.fit(x_train, y_train, validation_split=0.2, epochs=200)

scores = model.evaluate(x_test, y_test)
print('Mean Squared Error:', scores[1])
print('Mean Absolute Error:', scores[2])

y_pred = model.predict(x_test)
y_pred

from sklearn.metrics import r2_score
print('r2 Score :', r2_score(y_test, y_pred))

import matplotlib.pyplot as plt
y_pred = model.predict(x_test)
plt.scatter(y_test, y_pred)
plt.plot()

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(x_train, y_train)

y_pred = lm.predict(x_train)

from sklearn import metrics
print("r2 Score : ", metrics.r2_score(y_train, y_pred))
print("Mae : ", metrics.mean_absolute_error(y_train, y_pred))
print("Mse : ", metrics.mean_squared_error(y_train, y_pred))

import seaborn as sns
plt.figure()
sns.distplot(y_train-y_pred)
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.show()
