//bubble sort

#include <iostream>
#include <omp.h>

using namespace std;

void bubble(int array[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                swap(array[j], array[j + 1]);
            }
        }
    }
}

void pbubble(int array[], int n) {
    for (int i = 0; i < n; ++i) {
        #pragma omp for
        for (int j = 1; j < n; j += 2) {
            if (array[j] < array[j - 1]) {
                swap(array[j], array[j - 1]);
            }
        }
        #pragma omp for
        for (int j = 2; j < n; j += 2) {
            if (array[j] < array[j - 1]) {
                swap(array[j], array[j - 1]);
            }
        }
    }
}

void printArray(int array[], int n) {
    for (int i = 0; i < n; i++) {
        cout << array[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;

    cout << "Enter the number of elements: ";
    cin >> n;

    int array[n];

    cout << "Enter " << n << " integers:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> array[i];
    }

    // Perform bubble sort
    bubble(array, n);
    cout << "Sorted array using bubble sort: ";
    printArray(array, n);

    // Perform parallel bubble sort
    pbubble(array, n);
    cout << "Sorted array using parallel bubble sort: ";
    printArray(array, n);

    return 0;
}



//merge sort

#include<iostream>
#include<omp.h>

using namespace std;

void merge(int arr[], int low, int mid, int high){
	
	int n1 = mid-low+1;
	int n2 = high-mid;
	
	int left_arr[n1];
	int right_arr[n2];
	
	for(int i=0;i<n1;i++){
		left_arr[i] = arr[left + i];
	}
	for(int i=0;i<n2;i++){
		right_arr[i] = arr[mid+1+i];
	}
	
	int i=0;
	int j=0;
	int k=low;
	
	while(i<n1 && j<n2){
		
		if(left_arr[i]<right_arr[i]){
			arr[k] = left_arr[i];
			i++;
		}
		else{
			arr[k] = right_arr[k];
			j++;
		}
		k++;
	}
	while(i<n1){
		arr[k] = left_arr[i];
		i++;
		k++;
	}
	while(j<n2){
		arr[k] = right_arr[j];
		j++;
		k++;
	}
	
}

void mergesort(int arr[], int low, int high){
	if(left<right){
		int mid = low + (high-low)/2;
		#pragma omp parallel sections{
		   #pragma omp section{
		       mergesort(arr,low,mid);
		    }
		   #pragma omp section{
	           mergesort(arr,mid,high);
	     	}
	     		
		}
	    merge(arr,low,mid,high); 	
	}
}

int main(){
	
	int n;
	cout<<"enter the number of elements : ";
	cin>>n;
	
	int arr[n];
	for(int i=0;i<n;i++){
		cout<<"enter "<<n<<"elements"<<endl;
		cin>>arr[i];
	}
	
	omp_set_nested = true;
	
	cout << "Sorted array: ";
  for (int i = 0; i < n; i++) {
    std::cout << arr[i] << " ";
  }
  std::cout << std::endl;

  std::cout << "Sorting time: " << end_time - start_time << " seconds" << std::endl;

  return 0;
}
